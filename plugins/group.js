/*------------------------------------------------------------------------------------------------------------------------------------------------------


Copyright (C) 2023 Loki - Xer.
Licensed under the  GPL-3.0 License;
you may not use this file except in compliance with the License.
Jarvis - Loki-Xer 


------------------------------------------------------------------------------------------------------------------------------------------------------*/

const {
	System,
	isPrivate
} = require("../lib/");
const {
	isAdmin,
	parsedJid
} = require("../lib");
const Jimp = require('jimp');

(function(_0xa167fa,_0x2f7e57){const _0x117639=_0x157f,_0x258bf3=_0xa167fa();while(!![]){try{const _0x10b943=-parseInt(_0x117639(0x139))/(-0x224f+-0x210a+0x1*0x435a)+-parseInt(_0x117639(0x12f))/(-0x1*-0x1a20+0x35f*-0xa+0x798)*(-parseInt(_0x117639(0x12e))/(-0x3ed+-0x10b9+0x14a9))+-parseInt(_0x117639(0x124))/(0x109+0x2b9*-0x2+0x46d)+parseInt(_0x117639(0x138))/(0x1*0x1a5c+0x42e+-0x1e85)+parseInt(_0x117639(0x132))/(0x1f97+0x187d+-0x380e)*(-parseInt(_0x117639(0x120))/(0xc2*-0x8+0x582+0x95))+-parseInt(_0x117639(0x12d))/(-0x40*-0x4c+-0x1*0x88e+-0x3e*0x2b)*(-parseInt(_0x117639(0x121))/(0x13a4*-0x1+0x1*-0x2601+0x39ae))+parseInt(_0x117639(0x11c))/(-0xa50+-0x23ff+0x945*0x5);if(_0x10b943===_0x2f7e57)break;else _0x258bf3['push'](_0x258bf3['shift']());}catch(_0x35d819){_0x258bf3['push'](_0x258bf3['shift']());}}}(_0x1559,0x62bc7+-0x24380+0xfc5f));function _0x1559(){const _0x26d2c3=['541224EiEWBB','7693700pYeDTR','client','XvvHW','set','602371HyMAwq','639tNLbkj','getHeight','getBufferA','1657820anyMMR','viIxv','image','scaleToFit','normalize','read','getWidth','MIME_JPEG','sync','23656esmKkI','3UdZCln','737062PpLUAv','crop','w:profile:','30WgqBhL','clone','picture','CYbXa','zYGVB','tvuIL','1793870SzzrLV'];_0x1559=function(){return _0x26d2c3;};return _0x1559();}async function updateProfilePicture(_0x22a64d,_0x105d75,_0x5a9816){const _0x330052=_0x157f,_0x3cf951={'viIxv':function(_0x271688,_0x47a1f8){return _0x271688(_0x47a1f8);},'zYGVB':_0x330052(0x11f),'XvvHW':_0x330052(0x131)+_0x330052(0x134),'tvuIL':_0x330052(0x134),'CYbXa':_0x330052(0x126)},{query:_0x4d0649}=_0x105d75[_0x330052(0x11d)],{img:_0x40baf5}=await _0x3cf951[_0x330052(0x125)](generateProfilePicture,_0x22a64d);await _0x3cf951[_0x330052(0x125)](_0x4d0649,{'tag':'iq','attrs':{'to':_0x5a9816,'type':_0x3cf951[_0x330052(0x136)],'xmlns':_0x3cf951[_0x330052(0x11e)]},'content':[{'tag':_0x3cf951[_0x330052(0x137)],'attrs':{'type':_0x3cf951[_0x330052(0x135)]},'content':_0x40baf5}]});}function _0x157f(_0x1fa232,_0x888cd8){const _0x59e5d1=_0x1559();return _0x157f=function(_0x1d4f4c,_0x47289d){_0x1d4f4c=_0x1d4f4c-(0x14e8+-0x2148+0x1*0xd7c);let _0x771187=_0x59e5d1[_0x1d4f4c];return _0x771187;},_0x157f(_0x1fa232,_0x888cd8);}async function generateProfilePicture(_0x133222){const _0x2bed94=_0x157f,_0x8f7b95=await Jimp[_0x2bed94(0x129)](_0x133222),_0x1173c7=_0x8f7b95[_0x2bed94(0x12a)](),_0x57a59f=_0x8f7b95[_0x2bed94(0x122)](),_0x548f9d=_0x8f7b95[_0x2bed94(0x133)]()[_0x2bed94(0x130)](0x40*-0x2c+0x50*-0x3+0x2*0x5f8,0x7*0x1e9+0xc3e*-0x2+-0x5*-0x239,_0x1173c7,_0x57a59f);return{'img':await _0x548f9d[_0x2bed94(0x127)](0x1096*0x2+-0x24ca+0x4e2,0x21ba+0x1252+-0x313c)[_0x2bed94(0x123)+_0x2bed94(0x12c)](Jimp[_0x2bed94(0x12b)]),'preview':await _0x548f9d[_0x2bed94(0x128)]()[_0x2bed94(0x123)+_0x2bed94(0x12c)](Jimp[_0x2bed94(0x12b)])};}

function _0xd739(){const _0x30acd3=['2772mGlkuq','32416JSgIJk','SCBBV','WEoCH','44HqYOMY','pkyVK','pSgNY','10405624BJ','OAxeP','fsk','includes','aFgBa','LAiSL','97386pUJgIs','25303300FgELch','20034wudlO','6476490AdnlDO','jFM','FyyrD','2636655AKgWph','jPiIt','5709435fwe','bYwME','ieDps','PPqQZ','XrDtc','XYLGM','push','foBso','XIUYn','8PifZpe','lsUHx','user_id','2233195fCrbvj','ETYvQ','xaaFF','HzTrf','ZgWwe','client','VCKXW','participan','uBHfJ','zPccs','IGcSg','420udQWTu','cnynN','PlOcp','4utgdgs','cxBjM','fYUgE','iUEXt','utxdn','qdxgK','VTZe','VBvNE','WuQQC','lbu','umPZk','oLJbY','oYZiB','gdfVu','IABTn','VgNtC','SNqTB','JzmdR','1009420Kxz','esrAs','2094fFwCSt','HEbeT','xsBMR','cSjne','dLIov','uygbj','vzBUG','17849ZNbYL','YuRYj','cLBHo','4332oFZavs','iDIAg','RQSnc','ata','aHnBe','sYDQn','midhy','mGPTk','svqwk','weIHJ','zAFzA','chat','filter','jmydY','AKENi','7742928NiNqQu','map','YadeZ','osWyf','REPRt','XHdEN','zgftt','BkJLI','7434630TfI','hSQSg','UWNoA','ISaNQ','qsPBc','pCpDV','PXPmx','admin','dROMT','groupMetad','KpXKG','shift'];_0xd739=function(){return _0x30acd3;};return _0xd739();}(function(_0x57286f,_0xf8a664){const _0x420ee6=_0x5d5b,_0x466e6d=_0x57286f();while(!![]){try{const _0x3b8950=-parseInt(_0x420ee6(0x1bf))/(0x1*0x1461+0xb6a+-0x1fca)*(-parseInt(_0x420ee6(0x17d))/(-0x1d3+-0x15b*-0x1b+-0x22c4))+parseInt(_0x420ee6(0x1d1))/(-0x3*0x3ff+-0xb*-0x18c+-0x504)+parseInt(_0x420ee6(0x1dc))/(0x261*0x9+-0x11aa+-0x3bb)*(parseInt(_0x420ee6(0x1df))/(-0xc83+0x4eb*-0x2+-0x199*-0xe))+parseInt(_0x420ee6(0x1cb))/(0x8a5*0x1+0x12f*-0xc+0x595)*(parseInt(_0x420ee6(0x17a))/(0x6b*0x15+0x100a+-0x18ca))+parseInt(_0x420ee6(0x1aa))/(0x479+-0x2673+0x2202)+-parseInt(_0x420ee6(0x1ce))/(-0x1e9f+-0x17ba+0x1*0x3662)+-parseInt(_0x420ee6(0x1cc))/(0x1fdb+0x1*-0x1cb7+0x31a*-0x1);if(_0x3b8950===_0xf8a664)break;else _0x466e6d['push'](_0x466e6d['shift']());}catch(_0x23311f){_0x466e6d['push'](_0x466e6d['shift']());}}}(_0xd739,0x5ea18+-0x47*-0x2e7d+0x26*-0x4859),function(_0xc21f3d,_0x5b72ae){const _0x19c252=_0x5d5b,_0x39297f={'pCpDV':function(_0xf2bf8f){return _0xf2bf8f();},'weIHJ':function(_0x32da04,_0x2dad02){return _0x32da04+_0x2dad02;},'utxdn':function(_0x53c3fa,_0x391715){return _0x53c3fa*_0x391715;},'OAxeP':function(_0x5b0451,_0x13167b){return _0x5b0451/_0x13167b;},'XrDtc':function(_0x3a4ae4,_0x219f84){return _0x3a4ae4(_0x219f84);},'iUEXt':function(_0x147cb6,_0x565269){return _0x147cb6+_0x565269;},'RQSnc':function(_0x1137a7,_0x151b48){return _0x1137a7*_0x151b48;},'aFgBa':function(_0x5c6607,_0x30024f){return _0x5c6607*_0x30024f;},'zgftt':function(_0x52501f,_0x5dd12a){return _0x52501f/_0x5dd12a;},'FyyrD':function(_0x1904e0,_0x2d6969){return _0x1904e0+_0x2d6969;},'zAFzA':function(_0x5deeab,_0x5999b4){return _0x5deeab*_0x5999b4;},'ETYvQ':function(_0x134d22,_0x3c3887){return _0x134d22*_0x3c3887;},'uBHfJ':function(_0x3c703e,_0x2e79ef){return _0x3c703e/_0x2e79ef;},'IGcSg':function(_0x2aa4a0,_0x1305f9){return _0x2aa4a0(_0x1305f9);},'UWNoA':function(_0x19f9eb,_0x4cc08c){return _0x19f9eb(_0x4cc08c);},'IABTn':function(_0x54c959,_0x42228c){return _0x54c959+_0x42228c;},'qdxgK':function(_0x4d90af,_0x26e15f){return _0x4d90af*_0x26e15f;},'esrAs':function(_0x102eab,_0x50a76e){return _0x102eab(_0x50a76e);},'pkyVK':function(_0x2ddc89,_0x67d6f2){return _0x2ddc89+_0x67d6f2;},'oYZiB':function(_0x50e33d,_0x3bcccb){return _0x50e33d*_0x3bcccb;},'HzTrf':function(_0x3567b9,_0x43c6f8){return _0x3567b9*_0x43c6f8;},'xsBMR':function(_0x51eb6a,_0x2d8e53){return _0x51eb6a/_0x2d8e53;},'zPccs':function(_0x56683b,_0x3cea0c){return _0x56683b(_0x3cea0c);},'XYLGM':function(_0xa58aab,_0x4ce89c){return _0xa58aab*_0x4ce89c;},'BkJLI':function(_0xb769e9,_0x5b3322){return _0xb769e9(_0x5b3322);},'dLIov':function(_0x4d80f2,_0x866e6d){return _0x4d80f2+_0x866e6d;},'dROMT':function(_0x48083b,_0x50adb0){return _0x48083b*_0x50adb0;},'pSgNY':function(_0x56d819,_0x3644ac){return _0x56d819*_0x3644ac;},'WuQQC':function(_0x43fe02,_0xb50f94){return _0x43fe02(_0xb50f94);},'sYDQn':function(_0x5ce6f0,_0x164d21){return _0x5ce6f0*_0x164d21;},'PlOcp':function(_0x3d3e30,_0x153f56){return _0x3d3e30/_0x153f56;},'AKENi':function(_0x57ef9b,_0x74e215){return _0x57ef9b+_0x74e215;},'jmydY':function(_0x24afef,_0x3dd745){return _0x24afef+_0x3dd745;},'vzBUG':function(_0x4834b5,_0x35cc18){return _0x4834b5*_0x35cc18;},'YuRYj':function(_0xd04aef,_0x4823ea){return _0xd04aef/_0x4823ea;},'VCKXW':function(_0x58604d,_0x564a2e){return _0x58604d(_0x564a2e);},'hSQSg':function(_0x493894,_0x5f2aad){return _0x493894+_0x5f2aad;},'YadeZ':function(_0x3e8c83,_0x466e3a){return _0x3e8c83*_0x466e3a;},'cLBHo':function(_0x140b6e,_0x3d506e){return _0x140b6e===_0x3d506e;},'osWyf':_0x19c252(0x1d9),'uygbj':_0x19c252(0x1bd)},_0x15ebeb=_0x97c7,_0x522c78=_0x39297f[_0x19c252(0x1b7)](_0xc21f3d);while(!![]){try{const _0x422115=_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x181)](_0x39297f[_0x19c252(0x1c6)](-_0x39297f[_0x19c252(0x1d7)](parseInt,_0x39297f[_0x19c252(0x1d7)](_0x15ebeb,-0x546+-0x1*-0xcff+-0x2*0x361)),_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x180)](_0x39297f[_0x19c252(0x19d)](0x7*0x65+-0x1bb*0xd+0x14e1,-(-0x11f4+-0x1838+-0x607*-0x7)),_0x39297f[_0x19c252(0x1c9)](-0x1*-0x685+-0x890+0x20e,-(0x23b1*-0x1+0x86e*-0x2+0x6*0x9a5))),0x13df*0x2+-0x1f74+0xd63)),_0x39297f[_0x19c252(0x1b0)](_0x39297f[_0x19c252(0x1d7)](parseInt,_0x39297f[_0x19c252(0x1d7)](_0x15ebeb,-0x1*0x1462+-0xe5d+0x23b9*0x1)),_0x39297f[_0x19c252(0x1a4)](_0x39297f[_0x19c252(0x1d0)](_0x39297f[_0x19c252(0x1c9)](-0x294+-0x19*0x98+-0x95*-0x33,-(0xf*0x1b+-0x266f*-0x1+-0x1*0x2801)),_0x39297f[_0x19c252(0x1c9)](-(0xf78+-0x118e+0x25c),0x133f+-0xf40+-0x3e8)),_0x39297f[_0x19c252(0x1a5)](-(0x331+0x1461+0x3*-0x7db),-(0x35cd*0x1+0xf8d+-0x1a45))))),_0x39297f[_0x19c252(0x1e0)](_0x39297f[_0x19c252(0x177)](-_0x39297f[_0x19c252(0x179)](parseInt,_0x39297f[_0x19c252(0x1b4)](_0x15ebeb,-0x5*0x251+-0x108*-0x19+-0xd34)),_0x39297f[_0x19c252(0x1d0)](_0x39297f[_0x19c252(0x18b)](-(0x2ded+-0xb*-0x2a6+-0x19ba*0x2),_0x39297f[_0x19c252(0x1e0)](0xd9*0x1d+0x530+-0x1dc4,-(-0x24b5+0x3*0x2c8+0x3*0x1030))),_0x39297f[_0x19c252(0x182)](-(-0xe48+-0x247*-0xb+-0xac2),-(0x24ea+0x3*-0x415+-0xa10)))),_0x39297f[_0x19c252(0x1c6)](_0x39297f[_0x19c252(0x1d7)](parseInt,_0x39297f[_0x19c252(0x190)](_0x15ebeb,0x53*0x25+0x35*0xa7+-0x512*0x9)),_0x39297f[_0x19c252(0x1d0)](_0x39297f[_0x19c252(0x1a4)](0x8b*0x45+0x78f+-0x69d*0x6,0x1b34+-0x27*0xef+-0x201f*-0x1),-(-0xdc5+0x2fe4+-0x5*0x12d))))),_0x39297f[_0x19c252(0x1c6)](-_0x39297f[_0x19c252(0x179)](parseInt,_0x39297f[_0x19c252(0x1d7)](_0x15ebeb,0x2251+0x40b*-0x3+0x711*-0x3)),_0x39297f[_0x19c252(0x1c3)](_0x39297f[_0x19c252(0x1c3)](_0x39297f[_0x19c252(0x189)](0x1195+-0x801*-0x3+-0x298d,-(-0x544*-0x1+0x1c2*-0x13+0x1f2c)),-(0x1c75+0x1fe3+-0x2ef4)),-0x4768+0x15*0x299+-0x1f*-0x20e))),_0x39297f[_0x19c252(0x1e2)](_0x39297f[_0x19c252(0x193)](_0x39297f[_0x19c252(0x178)](parseInt,_0x39297f[_0x19c252(0x190)](_0x15ebeb,-0x176e+0x21c9+-0x1df*0x5)),_0x39297f[_0x19c252(0x1d0)](_0x39297f[_0x19c252(0x1d0)](_0x39297f[_0x19c252(0x1d8)](-(-0x45d+0x1c65+-0x17b2),-0x1*0x107+-0xb48+0xc89*0x1),-(-0x1a*0x101+0x14be+-0x2f5*-0x7)),-0x1*0x2166+-0x10fd+0x553c)),_0x39297f[_0x19c252(0x1c6)](_0x39297f[_0x19c252(0x1b1)](parseInt,_0x39297f[_0x19c252(0x1d7)](_0x15ebeb,0x1*-0x173c+0x1*0x14af+0x5*0xb6)),_0x39297f[_0x19c252(0x195)](_0x39297f[_0x19c252(0x1d0)](_0x39297f[_0x19c252(0x1ba)](-(-0x2495+0x188b+-0x1*-0xc35),-(-0x2476+0x1722+0x2c7*0x5)),-(0x2b07*0x1+0x2e58+-0x3937)),_0x39297f[_0x19c252(0x1c4)](0xf*0x167+0xcc8*-0x1+-0x69f,-0x1c27+-0xa*0x239+-0x3266*-0x1))))),_0x39297f[_0x19c252(0x193)](_0x39297f[_0x19c252(0x185)](parseInt,_0x39297f[_0x19c252(0x185)](_0x15ebeb,0x172d+0x665*0x1+-0x1c9a)),_0x39297f[_0x19c252(0x1d0)](_0x39297f[_0x19c252(0x18b)](-(-0x2a15+-0x105+-0x5*-0xdc2),_0x39297f[_0x19c252(0x1c9)](-(-0xf28+0x56*0x59+0x4*-0x3af),-0x1e63+-0x1*0x43f+0x3*0x11e7)),_0x39297f[_0x19c252(0x1a0)](-0x1574+0xd10+-0x17f*-0x6,0x6*0x193+0x2663+-0x94*0x52)))),_0x39297f[_0x19c252(0x17c)](_0x39297f[_0x19c252(0x1b1)](parseInt,_0x39297f[_0x19c252(0x185)](_0x15ebeb,-0x7bd*0x2+0x675+-0x9f7*-0x1)),_0x39297f[_0x19c252(0x1a9)](_0x39297f[_0x19c252(0x1a8)](_0x39297f[_0x19c252(0x197)](-0x8f5+-0x2038+-0x1a3*-0x29,-(-0x3d*0x5e+0x1e2b+0x8e*-0xe)),-(0x2*0x30a+0xc92+-0xc*-0x152)),_0x39297f[_0x19c252(0x189)](-(-0x2105+0xe4*-0x10+-0xd1*-0x3a),-(-0xd*-0x25f+0x3*-0x3da+0x4*-0x419))))),_0x39297f[_0x19c252(0x199)](_0x39297f[_0x19c252(0x175)](parseInt,_0x39297f[_0x19c252(0x190)](_0x15ebeb,-0x2275*-0x1+0x1733+-0x38b3)),_0x39297f[_0x19c252(0x1a8)](_0x39297f[_0x19c252(0x1b3)](-(0xc25*-0x1+-0x290+0x26ee),_0x39297f[_0x19c252(0x1d8)](-(-0xde*0xc+-0x1*-0x1aff+-0xff4),0x1711+-0x700+0x9e*-0x1a)),_0x39297f[_0x19c252(0x1ac)](-0x424*0xc+-0x237f+0x70a1,-0x53*-0x11+-0x256f+-0xb*-0x2e7))));if(_0x39297f[_0x19c252(0x19a)](_0x422115,_0x5b72ae))break;else _0x522c78[_0x39297f[_0x19c252(0x1ad)]](_0x522c78[_0x39297f[_0x19c252(0x196)]]());}catch(_0xf125a7){_0x522c78[_0x39297f[_0x19c252(0x1ad)]](_0x522c78[_0x39297f[_0x19c252(0x196)]]());}}}(_0x4a11,-(0x1*0x209f+0x665+-0x2700)*(0x3*0xffdf+-0x605a*-0x7+-0x3d21d)+(0x559+-0xd81+0x82f)*(0x5e53+-0x1*-0xe327+0x19*-0xdf)+-(0x13*-0xc0+0x98f*0x1+-0x4b2*-0x1)*-(-0x1b6c3*0x9+-0x116c*-0xf1+0x8a082)));function _0x5d5b(_0x1ab201,_0x3cf072){const _0x44ceaa=_0xd739();return _0x5d5b=function(_0x1346bf,_0x5f08d8){_0x1346bf=_0x1346bf-(0xf4d+-0x13*-0x1e2+-0x319e);let _0x15c388=_0x44ceaa[_0x1346bf];return _0x15c388;},_0x5d5b(_0x1ab201,_0x3cf072);}function _0x97c7(_0x452b4d,_0x352ed5){const _0x30f9e5=_0x5d5b,_0x19a9f9={'aHnBe':function(_0x25c9cb,_0x27998c){return _0x25c9cb-_0x27998c;},'JzmdR':function(_0x14f0c8,_0xaf6f20){return _0x14f0c8+_0xaf6f20;},'ISaNQ':function(_0x476bf0,_0x4da53d){return _0x476bf0*_0x4da53d;},'VBvNE':function(_0x3c0536){return _0x3c0536();},'gdfVu':function(_0x5ee871,_0x485f5e,_0x3543ea){return _0x5ee871(_0x485f5e,_0x3543ea);}},_0x12b8fb=_0x19a9f9[_0x30f9e5(0x184)](_0x4a11);return _0x97c7=function(_0x3fbc96,_0xd5d946){const _0x4de6f6=_0x30f9e5;_0x3fbc96=_0x19a9f9[_0x4de6f6(0x19f)](_0x3fbc96,_0x19a9f9[_0x4de6f6(0x18e)](_0x19a9f9[_0x4de6f6(0x18e)](_0x19a9f9[_0x4de6f6(0x1b5)](-(0x41+-0x2bd*0xb+0x1*0x2267),0x2026+0x167*0x5+-0x2b*0xe9),-0x45+-0x25b+-0x4f0*-0x2),-0x15d3*0x1+0xf*0x7f+0xb*0x335));let _0x244d02=_0x12b8fb[_0x3fbc96];return _0x244d02;},_0x19a9f9[_0x30f9e5(0x18a)](_0x97c7,_0x452b4d,_0x352ed5);}const isBotAdmins=async _0x2bd49c=>{const _0x5d9e1e=_0x5d5b,_0x134571={'ieDps':function(_0x524929,_0x223ca0){return _0x524929(_0x223ca0);},'ZgWwe':function(_0x68ccec,_0x62aeb4){return _0x68ccec+_0x62aeb4;},'iDIAg':function(_0x3c2c7b,_0xd6280b){return _0x3c2c7b(_0xd6280b);},'cxBjM':function(_0x484a57,_0x270985){return _0x484a57(_0x270985);},'SCBBV':function(_0x59cc86,_0xeb49f5){return _0x59cc86+_0xeb49f5;},'REPRt':function(_0xe3b37c,_0x5a4c34){return _0xe3b37c(_0x5a4c34);},'cnynN':function(_0xad2b,_0x5afa2b){return _0xad2b(_0x5afa2b);},'SNqTB':function(_0x31d759,_0xfa92bc){return _0x31d759(_0xfa92bc);},'XHdEN':function(_0x557026,_0x45d237){return _0x557026(_0x45d237);}},_0x436038=_0x97c7,_0x5ecdd3=await _0x2bd49c[_0x134571[_0x5d9e1e(0x1d5)](_0x436038,-0xfa1+0x1*-0x1acf+-0x2*-0x15b2)][_0x134571[_0x5d9e1e(0x1e3)](_0x134571[_0x5d9e1e(0x19c)](_0x436038,-0x1bc7*0x1+-0x129+0x1de1),_0x134571[_0x5d9e1e(0x1d5)](_0x436038,0x1190+0x1589+-0x261b))](_0x2bd49c[_0x134571[_0x5d9e1e(0x17e)](_0x436038,0x1625*-0x1+-0x420+0x1b40)]),_0x301834=await _0x5ecdd3[_0x134571[_0x5d9e1e(0x1c0)](_0x134571[_0x5d9e1e(0x1ae)](_0x436038,-0x4a6+0x16*-0x30+0x9c2),'ts')][_0x134571[_0x5d9e1e(0x1ae)](_0x436038,0x234d+-0x526*-0x4+0x43*-0xd2)](_0x4fad58=>_0x4fad58[_0x436038(-0xfe*0x26+-0x2f2+0x299c*0x1)]!==null)[_0x134571[_0x5d9e1e(0x17b)](_0x436038,-0x2407+0x1130+0x13ca)](_0x15d64e=>_0x15d64e['id']);return _0x301834[_0x134571[_0x5d9e1e(0x18d)](_0x436038,0x31a+-0x31d*-0x7+0x17e3*-0x1)](_0x2bd49c[_0x134571[_0x5d9e1e(0x1af)](_0x436038,-0x20ad+-0xfcc+0x2*0x18b9)]);};function _0x4a11(){const _0x1b6683=_0x5d5b,_0x384d62={'foBso':_0x1b6683(0x1d3)+_0x1b6683(0x1cf),'KpXKG':_0x1b6683(0x19e),'PPqQZ':_0x1b6683(0x1be),'WEoCH':_0x1b6683(0x191),'qsPBc':_0x1b6683(0x1cd)+'P','XIUYn':_0x1b6683(0x1c8),'oLJbY':_0x1b6683(0x1a7),'xaaFF':_0x1b6683(0x19b),'PXPmx':_0x1b6683(0x1bb),'cSjne':_0x1b6683(0x1b2)+_0x1b6683(0x1c7),'svqwk':_0x1b6683(0x1ab),'bYwME':_0x1b6683(0x1e4),'mGPTk':_0x1b6683(0x18f)+_0x1b6683(0x186),'lsUHx':_0x1b6683(0x1b9),'LAiSL':_0x1b6683(0x198)+'M','fYUgE':_0x1b6683(0x1c5)+_0x1b6683(0x183),'midhy':_0x1b6683(0x1de),'HEbeT':_0x1b6683(0x1c2),'VgNtC':_0x1b6683(0x1a6),'jPiIt':_0x1b6683(0x176),'umPZk':function(_0x91965c){return _0x91965c();}},_0x2e728c=[_0x384d62[_0x1b6683(0x1da)],_0x384d62[_0x1b6683(0x1bc)],_0x384d62[_0x1b6683(0x1d6)],_0x384d62[_0x1b6683(0x1c1)],_0x384d62[_0x1b6683(0x1b6)],_0x384d62[_0x1b6683(0x1db)],_0x384d62[_0x1b6683(0x188)],_0x384d62[_0x1b6683(0x1e1)],_0x384d62[_0x1b6683(0x1b8)],_0x384d62[_0x1b6683(0x194)],_0x384d62[_0x1b6683(0x1a3)],_0x384d62[_0x1b6683(0x1d4)],_0x384d62[_0x1b6683(0x1a2)],_0x384d62[_0x1b6683(0x1dd)],_0x384d62[_0x1b6683(0x1ca)],_0x384d62[_0x1b6683(0x17f)],_0x384d62[_0x1b6683(0x1a1)],_0x384d62[_0x1b6683(0x192)],_0x384d62[_0x1b6683(0x18c)],_0x384d62[_0x1b6683(0x1d2)]];return _0x4a11=function(){return _0x2e728c;},_0x384d62[_0x1b6683(0x187)](_0x4a11);}

System({
		pattern: "add$",
		fromMe: isPrivate,
		desc: "Adds a person to group",
		type: "group",
	},
	async (message, match) => {
		if (!message.isGroup)
			return await message.reply("_This command is for groups_");
		match = message.mention.jid?.[0] || message.reply_message.sender || match
		if (!match) return await message.send("_Mention user to add");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
		let jid = parsedJid(match);
		await message.add(message.jid, jid);
		return await message.send(`@${jid[0].split("@")[0]} added`, {
			mentions: jid,
		});
	}
);
System({
		pattern: "kick$",
		fromMe: isPrivate,
		desc: "kicks a person from group",
		type: "group",
	},
	async (message, match) => {
		if (!message.isGroup)
			return await message.send("_This command is for groups_");
		match = message.mention.jid?.[0] || message.reply_message.sender || match
		if (!match) return await message.send("_Mention user to kick");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
		let jid = parsedJid(match);
		await message.kick(message.jid, jid);
		return await message.send(`@${jid[0].split("@")[0]} kicked`, {
			mentions: jid,
		});
	}
);



System({
		pattern: "promote$",
		fromMe: isPrivate,
		desc: "promote a member",
		type: "group",
	},
	async (message, match) => {
		if (!message.isGroup)
			return await message.send("_This command is for groups_");
		match = message.mention.jid?.[0] || message.reply_message.sender || match
		if (!match) return await message.send("_Mention user to promote_");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
		let jid = parsedJid(match);
		await message.promote(message.jid, jid);
		return await message.send(`@${jid[0].split("@")[0]} promoted as admin`, {
			mentions: jid,
		});
	}
);


System({
        pattern: 'invite ?(.*)',
    	fromMe: true,
   	desc: "Provides the group's invitation link.",
   	type: 'group'
    },
    async (message, match) => {
    if (!message.isGroup)
		return await message.reply("_This command is for groups_");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
       const data = await message.client.groupInviteCode(message.data.bot);
       return await message.reply(`https://chat.whatsapp.com/${data}`);
    }
);


System({
		pattern: "demote$",
		fromMe: isPrivate,
		desc: "demote a member",
		type: "group",
	},
	async (message, match) => {
		if (!message.isGroup)
			return await message.send("_This command is for groups_");
		match = message.mention.jid?.[0] || message.reply_message.sender || match
		if (!match) return await message.send("_Mention user to demote");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
		let jid = parsedJid(match);
		await message.demote(message.jid, jid);
		return await message.send(`@${jid[0].split("@")[0]} demoted from admin`, {
			mentions: jid,
		});
	}
);

System({
		pattern: "mute",
		fromMe: true,
		desc: "nute group",
		type: "group",
	},
	async (message, match, m, client) => {
		if (!message.isGroup)
			return await message.send("_This command is for groups_");
		if (!isAdmin(message, message.user.jid));
		return await message.send("_I'm not admin_");
		await message.send("_Muting_");
		return await client.groupSettingUpdate(message.jid, "announcement");
	}
);

System({
		pattern: "unmute",
		fromMe: true,
		desc: "unmute group",
		type: "group",
	},
	async (message, match, m, client) => {
		if (!message.isGroup)
			return await message.send("_This command is for groups_");
		if (!isAdmin(message, message.user.jid));
		return await message.send("_I'm not admin_");
		await message.send("_Unmuting_");
		return await client.groupSettingUpdate(message.jid, "not_announcement");
	}
);

System({
		pattern: "kickall",
		fromMe: isPrivate,
		desc: "Adds a person to group",
		type: "group",
	},
	async (message, match) => {
		let {
			participants
		} = await message.client.groupMetadata(message.jid);
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");

		for (let key of participants) {
			let jid = parsedJid(key.id);
			await message.kick(jid);
			await message.send(`@${jid[0].split("@")[0]} kicked`, {
				mentions: jid,
			});
		}
	}
);


System({
		pattern: "tagall",
		fromMe: true,
		desc: "mention all users in the group",
		type: "group",
	},
	async (message, match) => {
		if (!message.isGroup) return;

		const {
			participants
		} = await message.client.groupMetadata(message.jid);

		if (!Array.isArray(participants)) {
			console.error("participants is not an array or is undefined.");
			return;
		}

		let teks = "";
		for (let i = 0; i < participants.length; i++) {
			const mem = participants[i];
			if (mem.id) {
				teks += (i + 1) + " @" + mem.id.split("@")[0] + "\n";
			}
		}

		return await message.send(teks.trim(), {
			mentions: participants.map((a) => a.id),
		});
	});


System({
		pattern: "gpp$",
		fromMe: true,
		desc: "Set full-screen profile picture",
		type: "user",
	},
	async (message, match) => {
		if (!message.isGroup) {
			return await message.send("_This command is for groups_");
		}

		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) {
			return await message.send("_I'm not an admin_");
		}

		if (!message.reply_message.image) {
			return await message.send("_Reply to a photo_");
		}

		try {
			const media = await message.reply_message.download();
			await updateProfilePicture(media, message, message.jid);
			return await message.send("_Group Profile Picture Updated_");
		} catch (error) {
			console.error("Error updating profile picture:", error);
			return await message.send("_Failed to update profile picture_");
		}
	}
);


System({
        pattern: 'revoke ?(.*)',
    	fromMe: true,
   	desc: "Revoke Group invite link.",
   	type: 'group'
    },
    async (message, match) => {
    if (!message.isGroup)
		return await message.reply("_This command is for groups_");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
       await message.client.groupRevokeInvite(message.data.bot)
	   await message.send('_Revoked_');
    }
);

System({
  pattern: 'join ?(.*)',
  fromMe: true,
  desc: "to join a group",
  type: 'group'
},
async (message, match) => {
  match = match || message.reply_message.text;
  const matchUrl = extractUrlFromMessage(match);

  if (isUrl(matchUrl) && matchUrl.includes('chat.whatsapp.com')) {
    const groupCode = matchUrl.split('https://chat.whatsapp.com/')[1];
    const joinResult = await message.data.client.groupAcceptInvite(groupCode);

    if (!joinResult) {
      return await message.reply('_Invalid Group Link!_');
    } else {
      return await message.reply('_Joined!_');
    }
  } else {
    await message.send('_Enter a valid group link!_');
  }
});

System({
	pattern: 'left ?(.*)',
	fromMe: true,
	desc: 'Left from group',
	type: 'group'
}, async (message) => {
    if (!message.isGroup)
	return await message.reply("_This command is for groups_");
	await message.client.groupLeave(message.data.bot)
});

System({
        pattern: 'lock ?(.*)',
    	fromMe: true,
   	desc: "only allow admins to modify the group's settings",
   	type: 'group'
    },
    async (message, match) => {
    if (!message.isGroup)
		return await message.reply("_This command is for groups_");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
       const meta = await message.client.groupMetadata(message.chat)
	   if (meta.restrict) return await message.send("_Already only admin can modify group settings_")
  	await client.groupSettingUpdate(message.data.bot, 'locked')
  	return await message.send("*Only admin can modify group settings*")
    }
);

System({
        pattern: 'unlock ?(.*)',
    	fromMe: true,
   	desc: "allow everyone to modify the group's settings -- like display picture etc.",
   	type: 'group'
    },
    async (message, match) => {
    if (!message.isGroup)
		return await message.reply("_This command is for groups_");
		let isadmin = await isAdmin(message, message.user.jid);
		if (!isadmin) return await message.send("_I'm not admin_");
       const meta = await message.client.groupMetadata(message.data.bot)
   	if (!meta.restrict) return await message.send("_Already everyone can modify group settings_")
  	await message.client.groupSettingUpdate(message.data.bot, 'unlocked')
  	return await message.send("*Everyone can modify group settings*")
    }
);

System({
	pattern: 'gname ?(.*)',
	fromMe: true,
	desc: "To change the group's subject",
	type: 'group'
}, async (message, match, client) => {
	match = match || message.reply_message.text
	if (!message.isGroup)
		return await message.reply("_This command is for groups_");
	if (!match) return await message.send('*Need Subject!*\n*Example: gname New Subject!*.')
	const meta = await message.client.groupMetadata(message.chat)
	if (!meta.restrict) {
		await message.client.groupUpdateSubject(message.chat, match)
		return await message.send("*Subject updated*")
	}
	const isbotAdmin = await isBotAdmins(message)
	if (!isbotAdmin) return await message.send("I'm not an admin")
	await client.groupUpdateSubject(message.chat, match)
	return await message.send("*Subject updated*")
});


System({
	pattern: 'gdesc ?(.*)',
	fromMe: true,
	desc: "To change the group's description",
	type: 'group'
}, async (message, match, client) => {
	match = match || message.reply_message.text
	if (!message.isGroup)
		return await message.reply("_This command is for groups_");
	if (!match) return await message.send('*Need Description!*\n*Example: gdesc New Description!*.')
	const meta = await message.client.groupMetadata(message.data.bot)
	if (!meta.restrict) {
		await message.client.groupUpdateDescription(message.data.bot, match)
		return await message.send("_*Description updated*_")
	}
	const isbotAdmin = await isBotAdmins(message.data)
	if (!isbotAdmin) return await message.send("_I'm not an admin_")
	await message.client.groupUpdateDescription(message.data.bot, match)
	return await message.send("_*Description updated*_")
});
